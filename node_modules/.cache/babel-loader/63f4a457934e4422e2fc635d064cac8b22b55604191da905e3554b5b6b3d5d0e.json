{"ast":null,"code":"var _jsxFileName = \"/Users/Administrator/Desktop/STUDY/SpringBoot+React/chatapp/src/component/ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s();\n  const [publicChats, setPublicChats] = useState([]);\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [userData, setUserData] = useState({\n    username: \"\",\n    receivername: \"\",\n    connected: false,\n    message: \"\"\n  });\n  const handleUserName = event => {\n    setUserData({\n      ...userData,\n      username: event.target.value\n    });\n  };\n  const registerUser = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient.over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n  const onConnected = () => {\n    setUserData({\n      ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onPublicMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessageReceived);\n  };\n  const onPublicMessageReceived = payload => {\n    let payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n        break;\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n  const onPrivateMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n  const onError = error => {\n    console.log(error);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter the user name\",\n        value: userData.username,\n        onChange: handleUserName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: registerUser,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatRoom, \"poML6F4EMrPm3MdeneJd7PIhen0=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","over","SockJS","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s","publicChats","setPublicChats","privateChats","setPrivateChats","Map","userData","setUserData","username","receivername","connected","message","handleUserName","event","target","value","registerUser","Sock","connect","onConnected","onError","subscribe","onPublicMessageReceived","onPrivateMessageReceived","payload","payloadData","JSON","parse","body","status","get","senderName","set","push","list","error","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","placeholder","onChange","type","onClick","_c","$RefreshReg$"],"sources":["/Users/Administrator/Desktop/STUDY/SpringBoot+React/chatapp/src/component/ChatRoom.js"],"sourcesContent":["import React, {useState} from 'react'\nimport { over } from 'stompjs'\nimport SockJS from 'sockjs-client'\n\nvar stompClient=null;\nconst ChatRoom = () => {\n\n  const [publicChats, setPublicChats] = useState([]);\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [userData, setUserData] = useState({\n        username: \"\",\n        receivername: \"\",\n        connected: false,\n        message: \"\"\n    })\n  \n  const handleUserName = (event) => {\n        setUserData({...userData, username : event.target.value})\n    }\n    \n  const registerUser = () => {\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient.over(Sock);\n        stompClient.connect({}, onConnected, onError);\n    } \n  \n  const onConnected = () => {\n        setUserData({...userData,\"connected\": true});\n        stompClient.subscribe('/chatroom/public', onPublicMessageReceived);\n        stompClient.subscribe( '/user/' + userData.username + '/private', onPrivateMessageReceived);\n    }\n\n  const onPublicMessageReceived = (payload) => {\n        let payloadData=JSON.parse(payload.body);\n        switch (payloadData.status) {\n            case \"JOIN\":\n                if(!privateChats.get(payloadData.senderName)){\n                    privateChats.set(payloadData.senderName,[]);\n                    setPrivateChats(new Map(privateChats));\n                }\n                break;\n            case \"MESSAGE\":\n                publicChats.push(payloadData);\n                setPublicChats([...publicChats]);\n                break;\n        }\n    }\n\n   const onPrivateMessageReceived = (payload) => {\n        var payloadData = JSON.parse(payload.body);\n        if(privateChats.get(payloadData.senderName)){\n            privateChats.get(payloadData.senderName).push(payloadData);\n            setPrivateChats(new Map(privateChats));\n        }else{\n            let list =[];\n            list.push(payloadData);\n            privateChats.set(payloadData.senderName,list);\n            setPrivateChats(new Map(privateChats));\n        }\n   }\n\n    \n  const onError = (error) => {\n      console.log(error);\n    }\n\n\n    return (\n    <div className='container'>\n        {userData.connected?\n        <div className='chat-box'>\n\n        </div>\n        :<div className='register'>\n            <input\n            id='user-name'\n            placeholder='Enter the user name'\n            value={userData.username}\n            onChange={handleUserName}/>\n            <button type='button' onClick={registerUser}>Connect</button>\n        </div>\n        }\n\n    </div>\n  )\n}\n\nexport default ChatRoom"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}